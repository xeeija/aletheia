upstream apis {
    # shared memory zone, has some benefits
    # https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/#sharing-data-with-multiple-worker-processes
    zone upstreams 128K;

    server ${WEB_URL};
    server ${SERVER_URL} backup;

    # keep connections to upstream server alive, so connections are reused between client requests
    # otherwise, connections would be closed after response, and each would cause tcp handshake/finish again
    # recommeded to set to twice the number of servers in the upstream block
    # see https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/
    keepalive 4;
}

# map the connection keep-alive/close header, set explicitly, if the header is present in the client request
# headers with empty string values are removed by nginx
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name localhost;

    # logging: https://docs.nginx.com/nginx/admin-guide/monitoring/logging/

    # send requests that match exactly directly to backend server
    location = /api/graphql {
        proxy_pass http://${SERVER_URL}/api/graphql;
        # set http 1.1 for proxying everywhere, in combination with keepalive from above
        # by default, nginx would use http 1.0 for proxying, which does not support keepalive
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
    }

    # send requests to socket directly to backend server
    location /api/socket/ {
        proxy_pass http://${SERVER_URL}/api/socket/;
        # set required headers for upgrade to ws connection and protocal
        # see https://nginx.org/en/docs/http/websocket.html
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
    }

    location /api/ {
        proxy_pass http://apis;
        # send request to next server in the upstream group, when the server response is 404
        # by default only idemptotent methods are sent to next server, non_idemptotent also includes post requests
        # so, first tries web, if not found tries 'server', because server is defined as backup
        proxy_next_upstream http_404 non_idempotent;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;

        # unused, from previous testing
        # proxy_intercept_errors on;
        # error_page 404 = @backend;
    }

    location / {
        proxy_pass http://${WEB_URL}/;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
    }

    # https://nginx.org/en/docs/http/ngx_http_core_module.html#location

    # unused, from previous testing
    # ~ matches as regex, also ^~ option?
    # location ~ /api/(graphql|socket) {
    #     proxy_pass ${SERVER_URL}/$1;
    # }
}
