upstream apis {
    # shared memory zone, has some benefits
    # https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/#sharing-data-with-multiple-worker-processes
    zone upstreams 128K;

    server "${WEB_URL}";
    server "${SERVER_URL}" backup;

    # keep connections to upstream server alive, so connections are reused between client requests
    # otherwise, connections would be closed after response, and each would cause tcp handshake/finish again
    # recommeded to set to twice the number of servers in the upstream block
    # see https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/
    keepalive 4;
}

# map the connection keep-alive/close header, set explicitly, if the header is present in the client request
# headers with empty string values are removed by nginx
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    server_name localhost;
    # set default docker DNS resolver (used for proxy_pass with variables)
    # resolver 127.0.0.11 valid=60s; # or valid=30s
    resolver 127.0.0.11;

    # logging: https://docs.nginx.com/nginx/admin-guide/monitoring/logging/

    # send requests that match exactly directly to backend server
    location = /api/graphql {
        # variable in proxy_pass forces re-evaluate of host (SERVER_URL) address IP,
        # otherwise it is only resolved once at nginx startup, and fails with 502 when other containers restart and get a new IP
        # see https://serverfault.com/a/593003
        # https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
        # https://github.com/nginx-proxy/nginx-proxy/issues/1289
        # https://stackoverflow.com/a/37656784
        set $graphqlUrl "http://${SERVER_URL}/api/graphql";
        proxy_pass $graphqlUrl;

        # set http 1.1 for proxying everywhere, in combination with keepalive from above
        # by default, nginx would use http 1.0 for proxying, which does not support keepalive
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
    }

    # send requests to socket directly to backend server
    location /api/socket/ {
        set $socketUrl "http://${SERVER_URL}/api/socket/$request_uri";
        proxy_pass $socketUrl;
        # set required headers for upgrade to ws connection and protocal
        # see https://nginx.org/en/docs/http/websocket.html
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
    }

    location /api/ {
        # $request_uri is required for proxy_pass with variable, or all requests would go to /
        set $apisUrl "http://apis$request_uri";
        proxy_pass $apisUrl;
        # send request to next server in the upstream group, when the server response is 404
        # by default only idemptotent methods are sent to next server, non_idemptotent also includes post requests
        # so, first tries web, if not found tries 'server', because server is defined as backup
        proxy_next_upstream http_404 non_idempotent;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;

        # unused, from previous testing
        # proxy_intercept_errors on;
        # error_page 404 = @backend;
    }

    location / {
        # $request_uri is required for proxy_pass with variable, or all requests would go to /
        set $webUrl "http://${WEB_URL}$request_uri";
        proxy_pass $webUrl;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
    }

    # https://nginx.org/en/docs/http/ngx_http_core_module.html#location

    # unused, from previous testing
    # ~ matches as regex, also ^~ option?
    # location ~ /api/(graphql|socket) {
    #     proxy_pass ${SERVER_URL}/$1;
    # }
}
