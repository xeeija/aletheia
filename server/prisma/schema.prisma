// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../dist/generated/typegraphql-prisma"
  emitTranspiledCode = true
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  username           String              @unique
  /// @TypeGraphQL.omit(output: true)
  password           String
  displayname        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  standardTheme      ColorTheme?         @relation(name: "fk_standardTheme", fields: [standardThemeId], references: [id])
  standardThemeId    String?             @db.Uuid
  randomWheels       RandomWheel[]
  drawnWinners       RandomWheelWinner[]
  randomWheelMember  RandomWheelMember[]
  likes              RandomWheelLike[]
  colorThemes        ColorTheme[]        @relation(name: "fk_creator")
  userAccessTokens   UserAccessToken[]
  eventSubscriptions EventSubscription[]
}

// Session store table

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@map("_session")
  @@ignore
}

// Common

model AccessType {
  type        String        @unique
  randomWheel RandomWheel[]
}

// Random Wheel
// TODO: rename name to title
// rename slug to tag (?)
// rename RandomWheel to Wheel in Graphql (?)

model RandomWheel {
  id                 String              @id @default(uuid()) @db.Uuid
  slug               String              @unique
  name               String? // maybe optional
  createdAt          DateTime            @default(now())
  uniqueEntries      Boolean             @default(false)
  editAnonymous      Boolean             @default(false)
  access             AccessType          @relation(fields: [accessType], references: [type])
  accessType         String              @default("PRIVATE")
  rotation           Float               @default(0)
  spinDuration       Int                 @default(8000)
  fadeDuration       Int                 @default(8000)
  owner              User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            String?             @db.Uuid
  theme              ColorTheme?         @relation(fields: [themeId], references: [id])
  themeId            String?             @db.Uuid
  entries            RandomWheelEntry[]
  winners            RandomWheelWinner[]
  members            RandomWheelMember[]
  likes              RandomWheelLike[]
  eventSubscriptions EventSubscription[]
  // visibility
  // settings:
  // unique entries option
  // spin duration (# spins based on that, with random factor)
  // fade out duration (time until it fades out after spin)
  // rotation of the wheel (or maybe client side based on last winner)
  // custom url?
}

model RandomWheelEntry {
  id            String      @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel @relation(fields: [randomWheelId], references: [id], onDelete: Cascade)
  randomWheelId String      @db.Uuid
  name          String
  createdAt     DateTime    @default(now())
  weight        Int         @default(1)
  color         String?
  redemptionId  String?
}

// maybe combine in "entry" model
model RandomWheelWinner {
  id            String      @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel @relation(fields: [randomWheelId], references: [id], onDelete: Cascade)
  randomWheelId String      @db.Uuid
  name          String
  createdAt     DateTime    @default(now())
  drawnBy       User?       @relation(fields: [drawnById], references: [id])
  drawnById     String?     @db.Uuid
  winnerIndex   Int?
}

// User or Collaborator or better name?
model RandomWheelMember {
  id            String          @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel     @relation(fields: [randomWheelId], references: [id], onDelete: Cascade)
  randomWheelId String          @db.Uuid
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.Uuid
  role          RandomWheelRole @relation(fields: [roleName], references: [name])
  roleName      String
}

model RandomWheelRole {
  name        String              @unique
  description String?
  members     RandomWheelMember[]
}

model RandomWheelLike {
  id            String      @id @default(uuid()) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  randomWheel   RandomWheel @relation(fields: [randomWheelId], references: [id])
  randomWheelId String      @db.Uuid
  createdAt     DateTime    @default(now())

  @@unique([userId, randomWheelId])
}

model ColorTheme {
  id            String        @id @default(uuid()) @db.Uuid
  name          String?
  colors        String[]
  creator       User?         @relation(name: "fk_creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String?       @db.Uuid
  global        Boolean       @default(false)
  randomWheels  RandomWheel[]
  usersStandard User[]        @relation(name: "fk_standardTheme")
}

// Twitch user access token
model UserAccessToken {
  id                  String   @id @default(uuid()) @db.Uuid
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @db.Uuid
  /// @TypeGraphQL.omit(output: true)
  accessToken         String
  /// @TypeGraphQL.omit(output: true)
  refreshToken        String?
  scope               String[]
  expiresIn           Int
  obtainmentTimestamp BigInt
  twitchUserId        String?
  twitchUsername      String?
}

model EventSubscription {
  id               String       @id @default(uuid()) @db.Uuid
  user             User?        @relation(fields: [userId], references: [id])
  userId           String?      @db.Uuid
  twitchUserId     String
  subscriptionType String
  type             String
  rewardId         String?
  randomWheel      RandomWheel? @relation(references: [id], fields: [randomWheelId])
  randomWheelId    String?      @db.Uuid
  rewardGroup      RewardGroup? @relation(fields: [rewardGroupId], references: [id])
  rewardGroupId    String?      @db.Uuid
  subscriptionId   String?
  condition        Json?
  useInput         Boolean      @default(false)
  paused           Boolean      @default(false)
}

model RewardGroup {
  id                String              @id @default(uuid()) @db.Uuid
  name              String?
  triggerSelected   Boolean             @default(false)
  RewardGroupItem   RewardGroupItem[]
  EventSubscription EventSubscription[]
}

model RewardGroupItem {
  id            String      @id @default(uuid()) @db.Uuid
  rewardGroup   RewardGroup @relation(references: [id], fields: [rewardGroupId], onDelete: Cascade)
  rewardGroupId String      @db.Uuid
  trigger       Boolean     @default(false)
}
