// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../dist/generated/typegraphql-prisma"
  emitTranspiledCode = true
}

model User {
  id                String              @id @default(uuid()) @db.Uuid
  username          String              @unique
  /// @TypeGraphQL.omit(output: true)
  password          String
  displayname       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  randomWheels      RandomWheel[]
  drawnWinners      RandomWheelWinner[]
  randomWheelMember RandomWheelMember[]
}

// Random Wheel

model RandomWheel {
  id        String              @id @default(uuid()) @db.Uuid
  slug      String              @unique
  name      String? // maybe optional
  createdAt DateTime            @default(now())
  owner     User                @relation(fields: [ownerId], references: [id])
  ownerId   String              @db.Uuid
  entries   RandomWheelEntry[]
  winners   RandomWheelWinner[]
  members   RandomWheelMember[]
  // visibility
  // settings:
  // unique entries option
  // spin duration (# spins based on that, with random factor)
  // fade out duration (time until it fades out after spin)
  // rotation of the wheel (or maybe client side based on last winner)
  // custom url?
}

model RandomWheelEntry {
  id            String      @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel @relation(fields: [randomWheelId], references: [id])
  randomWheelId String      @db.Uuid
  name          String
  createdAt     DateTime    @default(now())
}

// maybe combine in "entry" model
model RandomWheelWinner {
  id            String      @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel @relation(fields: [randomWheelId], references: [id])
  randomWheelId String      @db.Uuid
  name          String
  createdAt     DateTime    @default(now())
  drawnBy       User        @relation(fields: [drawnById], references: [id])
  drawnById     String      @db.Uuid
}

// User or Collaborator or better name?
model RandomWheelMember {
  id            String          @id @default(uuid()) @db.Uuid
  randomWheel   RandomWheel     @relation(fields: [randomWheelId], references: [id])
  randomWheelId String          @db.Uuid
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.Uuid
  role          RandomWheelRole @relation(fields: [roleName], references: [name])
  roleName      String
}

model RandomWheelRole {
  name        String              @unique
  description String?
  members     RandomWheelMember[]
}
